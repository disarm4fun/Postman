{
	"info": {
		"_postman_id": "ac0f73c3-96aa-49ae-b168-6f8c2a25bf73",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25603238"
	},
	"item": [
		{
			"name": "Task1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var respName = jsonData.name\r",
							"var respAge = jsonData.age\r",
							"var respSalary = jsonData.salary\r",
							"var respFamilySalary = jsonData.family.u_salary_1_5_year\r",
							"var req = request.data\r",
							"var reqName = req.name\r",
							"var reqAge = req.age\r",
							"var reqSalary = req.salary\r",
							"// 1.Спарсить response body в json\r",
							"pm.test(\"Parse response in json\", function () {\r",
							"});\r",
							"// 2.Проверит что name в ответе равно  name s request(name вбить руками)\r",
							"pm.test(\"Check my name \", function () {\r",
							"    pm.expect(respName).to.eql(\"Dmitriy\");\r",
							"});\r",
							"// 3.Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check my age\", function () {\r",
							"    pm.expect(respAge).to.eql(\"26\");\r",
							"});\r",
							"// 4.Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check my salary\", function () {\r",
							"    pm.expect(respSalary).to.eql(500);\r",
							"});\r",
							"// 5.Спарсить request\r",
							"pm.test(\"Parse request\", function () {\r",
							"});\r",
							"// 6.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name respone == request\", function () {\r",
							"    pm.expect(respName).to.eql(reqName);\r",
							"});\r",
							"// 7.Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age respone == request\", function () {\r",
							"    pm.expect(respAge).to.eql(reqAge);\r",
							"});\r",
							"// 8. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary respone == request\", function () {\r",
							"    pm.expect(respSalary).to.eql(+reqSalary);\r",
							"});\r",
							"// 9.Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"// 10.Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check u_salary_1_5_year in response == salary*4\", function () {\r",
							"    pm.expect(respFamilySalary).to.eql(+reqSalary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dmitriy",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var reqUrl = pm.request.url.query.toObject();\r",
							"var respName = jsonData.name\r",
							"var reqName = reqUrl.name\r",
							"var respAge = jsonData.age\r",
							"var reqAge = reqUrl.age\r",
							"var respSalary = jsonData.salary\r",
							"var reqSalary = +reqUrl.salary\r",
							"// 1.Спарсить response body в json\r",
							"pm.test(\"Parse response in json\", function () {\r",
							"});\r",
							"// 2.Спарсить request\r",
							"pm.test(\"Parse request\", function () {\r",
							"});\r",
							"// 3.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name response == request name\", function () {\r",
							"    pm.expect(respName).to.eql(reqName);\r",
							"});\r",
							"// 4.Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age response == request age\", function () {\r",
							"    pm.expect(respAge).to.eql(reqAge);\r",
							"});\r",
							"// 5.Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary response == request salary\", function () {\r",
							"    pm.expect(respSalary).to.eql(reqSalary);\r",
							"});\r",
							"// 6.Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"// 7.Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check dog to have name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"// 8.Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check dog to have age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"// 9.Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check name to have Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"// 10.Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check age to have 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Dmitriy&age=26&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitriy"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Task4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var req = pm.request.url.query.toObject();\r",
							"var respName = jsonData.name\r",
							"var reqName = req.name\r",
							"var respAge = jsonData.age\r",
							"var reqAge = +req.age\r",
							"var reqSalary = req.salary\r",
							"var respSalary = jsonData.salary\r",
							"// 1.Спарсить response body в json\r",
							"pm.test(\"Parse response in json\", function () {\r",
							"});\r",
							"// 2.Спарсить request\r",
							"pm.test(\"Parse request\", function () {\r",
							"});\r",
							"// 3.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name response == request name\", function() {\r",
							"    pm.expect(respName).to.eql(reqName)\r",
							"});\r",
							"// 4. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check age response == request age\", function() {\r",
							"    pm.expect(respAge).to.eql(reqAge)\r",
							"});\r",
							"// 5.Вывести в консоль параметр salary из request.\r",
							"// console.log(reqSalary)\r",
							"// 6.Вывести в консоль параметр salary из response.\r",
							"// console.log(respSalary)\r",
							"// 7.Вывести в консоль 0-й элемент параметра salary из response.\r",
							"// console.log(respSalary[0])\r",
							"// 8.Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"// console.log(respSalary[1])\r",
							"// 9.Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"// console.log(respSalary[2])\r",
							"// 10.Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check what 0 element parms salary == salary request\", function () {\r",
							"    pm.expect(respSalary[0]).to.eql(+reqSalary);\r",
							"});\r",
							"// 11.Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check what 1 element parms salary == salary request\", function () {\r",
							"    pm.expect(respSalary[1]).to.eql+(reqSalary*2);\r",
							"});\r",
							"// 12.Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check what 2 element parms salary == salary request\", function () {\r",
							"    pm.expect(respSalary[2]).to.eql+(reqSalary*3);\r",
							"});\r",
							"// 13.Создать в окружении переменную name\r",
							"pm.environment.get(\"name\");\r",
							"// 14.Создать в окружении переменную age\r",
							"pm.environment.get(\"age\");\r",
							"// 15.Создать в окружении переменную salary\r",
							"pm.environment.get(\"salary\");\r",
							"// 16.Передать в окружение переменную name\r",
							"pm.collectionVariables.set(\"name\", \"Dmitriy\");\r",
							"// 17.Передать в окружение переменную age\r",
							"pm.collectionVariables.set(\"age\", \"26\");\r",
							"// 18.Передать в окружение переменную salary\r",
							"pm.collectionVariables.set(\"salary\", \"500\");\r",
							"// 19.Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for (var i = 0 ;i < 3;i++) {\r",
							"    console.log(respSalary[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Task5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var req = request.data\r",
							"var respStartQa = jsonData.start_qa_salary\r",
							"var reqSalary = req.salary\r",
							"var reqAge = req.age\r",
							"var respAfterQa6Months = jsonData.qa_salary_after_6_months\r",
							"var respAfterQa12Months = jsonData.qa_salary_after_12_months\r",
							"var respPerson = jsonData.person\r",
							"// 1.Спарсить response body в json\r",
							"pm.test(\"Parse response in json\", function () {\r",
							"});\r",
							"// 2.Спарсить request\r",
							"pm.test(\"Parse request\", function () {\r",
							"});\r",
							"// 3.Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check json response have start_qa_salary\", function () {\r",
							"    pm.response.to.have.jsonBody(\"start_qa_salary\");\r",
							"});\r",
							"// 4.Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check json response have qa_salary_after_6_months\", function () {\r",
							"    pm.response.to.have.jsonBody(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// 5.Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check json response have qa_salary_after_12_months\", function () {\r",
							"    pm.response.to.have.jsonBody(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 6.Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check json response have qa_salary_after_1.5_year\", function () {\r",
							"    pm.response.to.have.jsonBody(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 7.Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check json response have qa_salary_after_3.5_years\", function () {\r",
							"    pm.response.to.have.jsonBody(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 8.Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check json response have person\", function () {\r",
							"    pm.response.to.have.jsonBody(\"person\");\r",
							"});\r",
							"// 9.Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check start_qa_salary == salary request\", function () {\r",
							"    pm.expect(respStartQa).to.eql(+reqSalary);\r",
							"});\r",
							"// 10.Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_6_months == salary*2 request\", function () {\r",
							"    pm.expect(respAfterQa6Months).to.eql(+reqSalary*2);\r",
							"});\r",
							"// 11.Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_12_months == salary*2 request\", function () {\r",
							"    pm.expect(respAfterQa12Months).to.eql(+reqSalary*2.7);\r",
							"});\r",
							"// 12.Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_1.5_year == salary*3.3 request\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+reqSalary*3.3);\r",
							"});\r",
							"// 13.Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_years == salary*3.8 request\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+reqSalary*3.8);\r",
							"});\r",
							"// 14.Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"parms person 1 element u_name == salary request\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+reqSalary);\r",
							"});\r",
							"// 15.Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"parms u_age == age request\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+reqAge);\r",
							"});\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check u_salary_after_5_years == salary*4.2request\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+reqSalary*4.2);\r",
							"});\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var person = {\r",
							"  u_age: 26,\r",
							"  u_name: [\"Dmitriy\", 500, 26],\r",
							"  u_salary_5_years: 2100\r",
							"};\r",
							"\r",
							"for (var key in person) {\r",
							"    console.log(key,person[key])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "age",
			"value": ""
		},
		{
			"key": "salary",
			"value": ""
		}
	]
}